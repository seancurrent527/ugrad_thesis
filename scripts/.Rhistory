for(i in 1:length(mat)) {
value = mat$Migrations[i]
sizes[mat$From[i]] = sizes[mat$From[i]] + value
sizes[mat$To[i]] = sizes[mat$To[i]] + value
}
sort(sizes)
return(names(sizes)[1:10])
}
(largest_edges(mat))
help(list)
mat <- read.table(na, sep = '\t', header = TRUE)
limit = 100000
largest_edges <- function(mat) {
nums <- integer(length(unique(mat$From)))
names(nums) <- unique(mat$From)
sizes <- list(nums)
for(i in 1:length(mat)) {
value = mat$Migrations[i]
sizes[mat$From[i]] = sizes[mat$From[i]] + value
sizes[mat$To[i]] = sizes[mat$To[i]] + value
}
sort(sizes)
return(names(sizes)[1:10])
}
(largest_edges(mat))
largest_edges <- function(mat) {
nums <- integer(length(unique(mat$From)))
names(nums) <- unique(mat$From)
sizes <- list(nums)
print(sizes)
for(i in 1:length(mat)) {
value = mat$Migrations[i]
sizes[mat$From[i]] = sizes[mat$From[i]] + value
sizes[mat$To[i]] = sizes[mat$To[i]] + value
}
sort(sizes)
return(names(sizes)[1:10])
}
(largest_edges(mat))
largest_edges <- function(mat) {
nums <- integer(length(unique(mat$From)))
names(nums) <- unique(mat$From)
sizes <- list(nums)
for(i in 1:length(mat)) {
value = mat$Migrations[i]
print(sizes[mat$From[i]])
sizes[mat$From[i]] = sizes[mat$From[i]] + value
sizes[mat$To[i]] = sizes[mat$To[i]] + value
}
sort(sizes)
return(names(sizes)[1:10])
}
(largest_edges(mat))
largest_edges <- function(mat) {
nums <- integer(length(unique(mat$From)))
names(nums) <- unique(mat$From)
sizes <- list(nums)
for(i in 1:length(mat)) {
value = mat$Migrations[i]
print(mat$From[i])
sizes[mat$From[i]] = sizes[mat$From[i]] + value
sizes[mat$To[i]] = sizes[mat$To[i]] + value
}
sort(sizes)
return(names(sizes)[1:10])
}
(largest_edges(mat))
largest_edges <- function(mat) {
nums <- integer(length(unique(mat$From)))
names(nums) <- unique(mat$From)
sizes <- list(nums)
for(i in 1:length(mat)) {
value = mat$Migrations[i]
print(sizes$mat$From[i])
sizes[mat$From[i]] = sizes[mat$From[i]] + value
sizes[mat$To[i]] = sizes[mat$To[i]] + value
}
sort(sizes)
return(names(sizes)[1:10])
}
(largest_edges(mat))
mat <- read.table(na, sep = '\t', header = TRUE)
mat <- read.table(na, sep = '\t', header = TRUE)
limit = 100000
largest_edges <- function(mat) {
nums <- integer(length(unique(mat$From)))
names(nums) <- unique(mat$From)
sizes <- list(nums)
for(i in 1:length(mat)) {
value = mat$Migrations[i]
sizes[mat$From[i]] <- sizes[mat$From[i]] + value
sizes[mat$To[i]] <- sizes[mat$To[i]] + value
}
sort(sizes)
return(names(sizes)[1:10])
}
(largest_edges(mat))
mat <- read.table(na, sep = '\t', header = TRUE)
limit = 100000
largest_edges <- function(mat) {
nums <- integer(length(unique(mat$From)))
names(nums) <- unique(mat$From)
sizes <- list(nums)
for(i in 1:length(mat)) {
value = mat$Migrations[i]
sizes[[mat$From[i]]] <- sizes[[mat$From[i]]] + value
sizes[[mat$To[i]]] <- sizes[[mat$To[i]]] + value
}
sort(sizes)
return(names(sizes)[1:10])
}
(largest_edges(mat))
largest_edges <- function(mat) {
nums <- integer(length(unique(mat$From)))
names(nums) <- unique(mat$From)
sizes <- list(nums)
for(i in 1:length(mat)) {
value = mat$Migrations[i]
print(sizes[[mat$From[i]]])
sizes[[mat$From[i]]] <- sizes[[mat$From[i]]] + value
sizes[[mat$To[i]]] <- sizes[[mat$To[i]]] + value
}
sort(sizes)
return(names(sizes)[1:10])
}
(largest_edges(mat))
largest_edges <- function(mat) {
nums <- integer(length(unique(mat$From)))
names(nums) <- unique(mat$From)
sizes <- list(nums)
for(i in 1:length(mat)) {
value = mat$Migrations[[i]]
print(sizes[[mat$From[[i]]]])
sizes[[mat$From[i]]] <- sizes[[mat$From[i]]] + value
sizes[[mat$To[i]]] <- sizes[[mat$To[i]]] + value
}
sort(sizes)
return(names(sizes)[1:10])
}
(largest_edges(mat))
mat <- read.table(na, sep = '\t', header = TRUE)
limit = 100000
largest_edges <- function(mat) {
nums <- integer(length(unique(mat$From)))
names(nums) <- unique(mat$From)
sizes <- list(nums)
for(i in 1:length(mat)) {
value = mat$Migrations[i]
sizes[mat$From[i]] <- sizes[[mat$From[i]]] + value
sizes[mat$To[i]] <- sizes[[mat$To[i]]] + value
}
sort(sizes)
return(names(sizes)[1:10])
}
(largest_edges(mat))
mat
mat$From[1]
mat$From[[1]]
typeof(mat$From[1])
mode(mat$From[1])
class(mat$From[1])
mat <- read.table(na, sep = '\t', header = TRUE)
limit = 100000
largest_edges <- function(mat) {
nums <- integer(length(unique(mat$From)))
names(nums) <- unique(mat$From)
sizes <- list(nums)
for(i in 1:length(mat)) {
value = mat$Migrations[i]
sizes[as.character(mat$From)[i]] <- sizes[[as.character(mat$From)[i]]] + value
sizes[as.character(mat$To)[i]] <- sizes[[as.character(mat$To)[i]]] + value
}
sort(sizes)
return(names(sizes)[1:10])
}
(largest_edges(mat))
help(read.table)
mat <- read.table(na, sep = '\t', header = TRUE, stringsAsFactors = FALSE)
limit = 100000
largest_edges <- function(mat) {
nums <- integer(length(unique(mat$From)))
names(nums) <- unique(mat$From)
sizes <- list(nums)
for(i in 1:length(mat)) {
value = mat$Migrations[i]
sizes[mat$From[i]] <- sizes[[mat$From[i]]] + value
sizes[mat$To[i]] <- sizes[[mat$To[i]]] + value
}
sort(sizes)
return(names(sizes)[1:10])
}
(largest_edges(mat))
largest_edges <- function(mat) {
nums <- integer(length(unique(mat$From)))
names(nums) <- unique(mat$From)
sizes <- list(nums)
for(i in 1:length(mat)) {
value = mat$Migrations[i]
sizes[[mat$From[i]]] <- sizes[[mat$From[i]]] + value
sizes[[mat$To[i]]] <- sizes[[mat$To[i]]] + value
}
sort(sizes)
return(names(sizes)[1:10])
}
(largest_edges(mat))
largest_edges <- function(mat) {
nums <- integer(length(unique(mat$From)))
names(nums) <- unique(mat$From)
sizes <- list(nums)
for(i in 1:length(mat)) {
value = mat$Migrations[i]
sizes[[mat$From[i]]] <- sizes[[mat$From[i]]] + value
sizes[[mat$To[i]]] <- sizes[[mat$To[i]]] + value
}
print(sizes)
sort(sizes)
return(names(sizes)[1:10])
}
(largest_edges(mat))
source('~/MATH_498/code/scripts/chord.R')
mat <- read.table(na, sep = '\t', header = TRUE, stringsAsFactors = FALSE)
limit = 100000
mat <- mat[mat$Migrations > limit,]
mat$Migrations <- mat$Migrations / 1000000
cols = rainbow(length(unique(mat$From)))
circos.par(gap.after = 2.5, track.margin = c(-0.1, 0.1), points.overflow.warning = FALSE)
chordDiagram(mat, directional = -1, grid.col = cols, transparency = 0.35,
diffHeight = uh(5, "mm"), annotationTrack = "grid",
annotationTrackHeight = uh(7, "mm"),
preAllocateTracks = list(track.height = max(strwidth(unlist(mat$From)))))
for(si in get.all.sector.index()) {
circos.axis(h = "top", labels.cex = 1, labels.font = 2, sector.index = si, track.index = 2,
minor.ticks = 1)
}
circos.track(track.index = 1, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
xplot = get.cell.meta.data("xplot")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
if(abs(xplot[2] - xplot[1]) < 10) {
fac <- "clockwise"
ad <- c(-1, 0.5)
} else {
fac <- "bending"
ad <- c(0.5, -2)
}
circos.text(mean(xlim), ylim[1], sector.name, facing = fac, font = 2,
niceFacing = TRUE, adj = ad, col= cols[CELL_META$sector.numeric.index])
}, bg.border = NA)
circos.clear()
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
limit = 10000
source('~/MATH_498/code/scripts/chord.R')
help(rainbow)
hcl.pals()
install.packages("ggthemes")
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
help("gdocs_pal")
#cols = rainbow(length(unique(mat$From)))
cols = gdocs_pal()(length(unique(mat$From)))
show_col(gdocs_pal()(20))
install.packages(scales)
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
library(scales)
show_col(gdocs_pal()(20))
library(ggthemes)
show_col(gdocs_pal()(20))
install.packages("ggthemes")
install.packages("ggthemes")
install.packages("ggthemes", version = "3.5.0")
show_col(gdocs_pal()(20))
library(scales)
library(ggthemes)
show_col(gdocs_pal()(20))
install.packages("rcartocolor")
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
mat <- read.table(eu, sep = '\t', header = TRUE, stringsAsFactors = FALSE)
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
help("lapply")
mat <- read.table(sa, sep = '\t', header = TRUE, stringsAsFactors = FALSE)
limit = 100000
country_size <- function(m, c) {
froms <- sum(m$Migrations[m$From == c])
tos <- sum(m$Migrations[m$To == c])
return(froms + tos)
}
top_countries <- function(s, l) {
sort(s, descending = TRUE)
return(names(s)[1:l])
}
countries <- unique(mat$From)
sizes = vapply(countries, function(x) {country_size(mat, x)})
sizes = vapply(countries, function(x) {country_size(mat, x)}, FUN.VALUE = c(0))
names(sizes) <- countries
(top_countries(sizes, 12))
(top_countries(sizes, 12))
top_countries <- function(s, l) {
sort(s, decreasing = TRUE)
return(names(s)[1:l])
}
countries <- unique(mat$From)
sizes = vapply(countries, function(x) {country_size(mat, x)}, FUN.VALUE = c(0))
names(sizes) <- countries
(top_countries(sizes, 12))
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
help("circos.axis")
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
help(sort)
sizes
sort(sizes)
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
help(circos.text)
help(font)
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
source('~/MATH_498/code/scripts/chord.R')
